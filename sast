#!/bin/sh
#
#  sast - Simple Assembly Sequence Typing
#  Copyright (C) 2018  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Home: https://github.com/zwets/sast

# Make sure sort and awk run predictably and fast
export LC_ALL="C"

# Constants
PROGNAME="$(basename "$0")"
SAST_DB="sast-db"
SEQID_FILE="${SAST_DB}.seqids"
LAST_OUTPUT="${SAST_DB}.last.tsv"
TAB="$(printf '\t')"

# Parameters
PCT_IDENT="100"
PCT_COVER="80"
ALLELES="-"
NPROC="$(nproc --ignore=1 2>/dev/null || echo 1)"

# Function exits this script with $* on stderr
err_exit() {
    echo "${PROGNAME}: $*" >&2
    exit 1
}

# Function emits $* on stderr if VERBOSE is set
emit() {
    [ -z "$VERBOSE" ] || echo "${PROGNAME}: $*" >&2
}

# Function either un(bxg)zips or cats "$1"
maybe_decompress() {
    case "$($FILE_EXE --brief --mime-type "$1")" in
        application/gzip)    gzip -dc "$1" ;;
        application/x-xz)    xz -dc "$1" ;;
        application/x-bzip2) bzip2 -dc "$1" ;;
        *) cat "$1" ;;
    esac
    }

# Function creates the SAST_DB and SEQID_FILE from genome files $*
create_database() {
    local tmp_seqid_file="${SEQID_FILE}.tmp"

    emit "creating database: $SAST_DB"
    rm -f ${SAST_DB}.n?? "${SEQID_FILE}"
    echo "#seqid" > "${tmp_seqid_file}"

    # Rewrite the sequence headers so their seqid matches basename of the file
    while [ $# -ne 0 ]; do
        # Obtain genome identifier by stripping extension(s) from the fasta file 
        S="$(echo "$(basename "$1")" | $SED_EXE -re 's/^(.*)(\.fn?a?s?t?a?(\.gz|\.bz2|\.xz)?)/\1/')"

        emit "adding genome: $S"
        echo "$S" >> "${tmp_seqid_file}"
        maybe_decompress "$1" | $SED_EXE -re 's/^>(.*)/>'$S' \1/'
        shift

    done | $MAKEBLASTDB_EXE -input_type fasta -dbtype nucl -out ${SAST_DB} -title "${SAST_DB}" >/dev/null

    # Sort the seqid file else no joining
    emit "creating seqid file: $SEQID_FILE"
    sort "${tmp_seqid_file}" > "$SEQID_FILE"
    rm -f "${tmp_seqid_file}"
    }

# BLAST output format specifier and column offsets
#BLAST_OUTFMT="6 qacc qstart qend qlen sacc sstart send length evalue pident bitscore qcovs qcovhsp nident gapopen gaps mismatch stitle sseq"
##             $ 1    2      3    4    5    6      7    8      9      10     11       12    13      14     15      16   17       18     19
BLAST_OUTFMT="6 sacc qacc pident qcovs"
#             $ 1    2    3      4

# Function to perform the BLAST query; args $* are added to its end
blast_query() {
    $BLASTN_EXE -db "$SAST_DB" -task blastn -num_threads "$NPROC" -parse_deflines \
           -perc_identity "$PCT_IDENT" -qcov_hsp_perc "$PCT_COVER" \
           -query "$ALLELES" -outfmt "$BLAST_OUTFMT" $*
    }

# Function to process the BLAST output, splitting the allele in columns "Gene" and "Allele",
# then sorting on decreasing coverage,pident within unique genome+gene combination
# then keeping the top row per unique genome+gene combination
# then pivoting these from EAV to an ExA matrix with the V in the cells
# then joining these with the mapping table
process_output() {
    $GAWK_EXE -bO '
        BEGIN { OFS=FS="\t" }
        { match($2, "^(.*)[^0-9]([0-9]+)$", A); print $1, A[1], A[2] ($3<100.0?"*":"") ($4<100.0?"?":""), $3, $4 }' |
    sort -t "$TAB" -k 1,2 -k 5,5nr -k 4,4nr |
    sort -t "$TAB" -k 1,2 -u |
    $GAWK_EXE -bO -f "$(dirname "$0")/pivot-eav-table.awk" |
    if [ -n "$TABLE" ]; then $GAWK_EXE -bO -v LHS_FILE="$TABLE" -f "$(dirname "$0")/join-tables.awk"; else cat; fi |
    sort -k1
    }


# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $PROGNAME [OPTIONS] [ALLELES|-] [GENOME ...]

  Look for each allele from file ALLELES in each GENOME file.  If ALLELES is
  absent or '-' read alleles from stdin.  If no GENOMEs are given, reuse the
  set from the previous run.

  Produce a table listing for each genome, for each gene, the allele found, or
  the closest match that meets IDENT and COVER.  If TABLE is specified, use it
  to look up the ST for each allele combination, and prepend it to each row.
  Matches with less than 100% identity are marked with a '*'; matches covering
  less than 100% of the allele are marked with a '?'.

  OPTIONS

  -t, --table TABLE     Map allele combination onto ST using TABLE (see below)
  -i, --identity IDENT  Minimum percentage identity (default $PCT_IDENT)
  -c, --coverage COVER  Minimum percentage of allele covered (default $PCT_COVER)
  -j, --join OUTPUT     Join output to previous OUTPUT table
  -p, --proc[essors] N  Use N processors (default \`nproc --ignore=1\` = $NPROC) 
  -v, --verbose         Report progress on stderr

  FILE FORMATS

  The ALLELES file must be FASTA, and may list any number of alleles for any
  number of genes.  Each allele must have a sequence header with format
  '>GDN X', where G is the gene name (a sequence of arbitrary characters),
  D is a delimiter (any single non-numeric character), and N is the allele
  number (unique among all alleles for G).  X is optional arbitrary text.

  This convention means that you can use most allele files (e.g. from PubMLST
  or Pasteur) unmodified, as e.g. 'rpoB_1', 'bla_OXA-15', or 'RS31795/1' all
  comply with the format.

  Each GENOME file must be (optionally compressed) FASTA containing assembled
  contigs.  Its file name minus extension is used as the genome identifier in
  $PROGNAME output.  If your file names are ugly, ln(1) is for you.

  TABLE must be a TSV with one column having the ST, and the remaining columns
  the allele combination corresponding to the ST.  Its header must specify the
  gene name corresponding to each column.  The ST column can have any name.
  Column order is arbitrary and determines the column order in the output.
 
  Note: TABLE can actually have any number of columns, any subset of which may
  match any subset of the gene profile, provided the join is unique.  The final
  output is simply the natural join of the table of detected alleles and TABLE.

  For more information, see https://github.com/zwets/sast.
" >&2
    exit ${1:-1}
}

# Check dependencies

checked_dep() {
    local EXE="${1:-$(which "$2")}"
    local VAR="$(echo "SAST_$2" | tr 'a-z' 'A-Z')"
    [ -x "$EXE" ] && echo "$EXE" || 
        err_exit "no such executable: $2.\nInstall $2 and/or set $VAR to its location."
}

export \
    FILE_EXE="$(checked_dep "$SAST_FILE" 'file')" \
    GAWK_EXE="$(checked_dep "$SAST_GAWK" 'gawk')" \
    SED_EXE="$(checked_dep "$SAST_SED" 'sed')" \
    BLASTN_EXE="$(checked_dep "$SAST_BLASTN" 'blastn')" \
    MAKEBLASTDB_EXE="$(checked_dep "$SAST_MAKEBLASTDB" 'makeblastdb')" \
    || exit 1

# Parse options

unset TABLE VERBOSE JOIN_TO 
while [ $# -ne 0 -a "$(expr "$1" : '\(.\)..*')" = "-" ]; do
    case $1 in
    --table=*)      TABLE="${1##--table=}" ;;
    -t|--table)     shift || usage_exit; TABLE="$1" ;;
    --join=*)       JOIN_TO="${1##--join=}" ;;
    -j|--join)      shift || usage_exit; JOIN_TO="$1" ;;
    --ident*=*)     PCT_IDENT="${1##--ident*=}" ;;
    -i|--ident*)    shift || usage_exit; PCT_IDENT="$1" ;;
    --cover*=*)     PCT_COVER="${1##--cover*=}" ;;
    -c|--cover*)    shift || usage_exit; PCT_COVER="$1" ;;
    --proc*=*)      NPROC="${1##--proc*=}" ;;
    -p|--proc*)     shift || usage_exit; NPROC="$1" ;;
    -v|--verbose)   VERBOSE=1 ;;
    -h|--help)      usage_exit 0 ;;
    *)              usage_exit ;;
    esac
    shift || usage_exit
done

# Check options

[ -z "$TABLE" ] || [ -f "$TABLE" ] || err_exit "no such file: $TABLE"
[ -z "$JOIN_TO" ] || [ -f "$JOIN_TO" ] || err_exit "no such file: $JOIN_TO"

# Parse args (note all are optional)

if [ $# -ge 1 ]; then

    ALLELES="$1"
    shift

    if [ $# -ge 1 ]; then
        create_database "$@"
    elif [ ! -f "${SAST_DB}.nhr" ]; then
        err_exit "no genomes specified and no database '$SAST_DB'"
    else
        emit "reusing database $SAST_DB"
    fi
fi

# Check args

[ "$ALLELES" = "-" ] || [ -f "$ALLELES" ] || err_exit "alleles file not found: $ALLELES"
emit "reading alleles from: $ALLELES"

# And finally the one-liner to do everything!

emit "performing BLAST"
blast_query | 
process_output | 
join --header -o auto -a 1 -t "$TAB" ${JOIN_TO:-$SEQID_FILE} - | 
tee "$LAST_OUTPUT"

# vim: sts=4:sw=4:et:si:ai
